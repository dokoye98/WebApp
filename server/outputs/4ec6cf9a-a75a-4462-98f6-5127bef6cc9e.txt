Ready to receive input:
Token{key=VARIABLE, value='luka'}
Token{key=VAR_ASSIGN, value='='}
Token{key=LITERAL, value='wolf'}
Token{key=PRINT, value='print'}
Token{key=LITERAL, value='luka'}
AST after optimization: PrintVariableNode(print luka):
  |
  +-- Variable("luka")
  +-- Literal("wolf") : String : LiteralNode
luka = "wolf"
t0 = luka
call print, t0
LOAD R0, "wolf"
STORE R0, luka
LOAD R0, luka
CALL print, R0
wolf
Registers
R0 = wolf
Variables:
luka = wolf
Assembly Code here:

section .data
luka db 'wolf', 0

section .bss
;

section .text
global _start
_start:
    ; Load the address of the variable into EAX
    mov eax, luka
    ; Push the address onto the stack
    push eax
    ; Call the print function
    call print
    ; Clean up the stack
    add esp, 4
    ; Exit the program
    mov eax, 1          ; System call number for exit
    xor ebx, ebx        ; Exit code 0
    int 0x80            ; Make the system call

print:
    mov edx, 4       ; Length of the string
    mov ecx, [esp+4]    ; Pointer to the string on the stack
    mov ebx, 1          ; File descriptor (stdout)
    mov eax, 4          ; System call number for sys_write
    int 0x80            ; Make the system call
    ret                 ; Return from the function

Finished processing input.
