Ready to receive input:
Token{key=NUM_VAR, value='a'}
Token{key=VAR_ASSIGN, value='='}
Token{key=LITERAL, value='12'}
Token{key=VAR_ADD, value='a'}
Token{key=ADDITION, value='+'}
Token{key=LITERAL, value='22'}
Starting parse process with tokens:
AddVariableNode(+): Integer
  |
  +-- Variable(a)
  +-- Literal("12") : String
  +-- Literal("22") : String
Analyzing semantics for AST: AddVariableNode
BinaryAssignmentNode: Literal("12") : String, Literal("22") : String
Checking expression: Literal("12") : String
Expression is a LiteralNode
Checking expression: Literal("22") : String
Expression is a LiteralNode
Analyzing semantics for AST: VariableAssignmentNode
VariableAssignmentNode: a, Literal("12") : String
Checking expression: Literal("12") : String
Expression is a LiteralNode
a = 1100 (12)
t0 = a
t1 = 10110 (22)
t2 = t0 + t1
LOAD R0, "1100"
STORE a , R0
LOAD R1, "10110"
ADD R2, R0 , R1
MOV a, R2
CALL print, R2
100010
Registers: 
R1 = 10110
R3 = 0
R2 = 100010
R6 = 0
R0 = 1100
R4 = 0
R5 = 0
Variables: 
a = 100010
Memory: 

Assembly Code here:

section .data
result dd 0
buffer db 'Result: ', 0
buffer_len equ $ - buffer
num_str db '0000000000', 0
num_len equ 10
a dd 12
section .text
global _start
_start:
    mov eax, [a]
    add eax, 22
    mov [result], eax
    mov ecx, num_len
    mov esi, result
    mov eax, [esi]
    mov ebx, 10
convert_loop:
    xor edx, edx
    div ebx
    add dl, '0'
    dec ecx
    mov [num_str + ecx], dl
    test eax, eax
    jnz convert_loop
    mov eax, 4
    mov ebx, 1
    mov edx, num_len
    mov ecx, num_str
    int 0x80
    mov eax, 1
    xor ebx, ebx
    int 0x80

Finished processing input.
