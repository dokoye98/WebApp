Ready to receive input:
Token{ key=PRINT, value='print }
Token{ key=LITERAL, value='Hello, World! }
Starting parse process with tokens:
PrintStatement : void
  |
  +-- Literal("Hello, World!") : String
Analyzing semantics for AST: PrintStatementNode
PrintStatementNode: Literal("Hello, World!") : String
Checking expression: Literal("Hello, World!") : String
Expression is a LiteralNode
t0 = "Hello, World!"
call print, t0
LOAD R0, "Hello, World!"
CALL print, R0
Hello, World!
Registers: 
R3 = 0
R12 = 0
R8 = 0
R_TOTAL = 0
R1 = 0
R5 = 0
R13 = 0
R4 = 0
R9 = 0
R11 = 0
R0 = Hello, World!
R2 = 0
R6 = 0
R10 = 0
R7 = 0
Variables: 
Memory: 

Assembly Code here:

section .data
message db  'Hello, World!', 0;

section .bss
;

section .text
global _start            ;
_start
_start:
    mov eax, message
    push eax
    call print
    add esp, 4
    mov eax, 1          ; exit call
    xor ebx, ebx        ; exit code 0
    int 0x80            ;  system call
print:
    mov edx, len        ; dynamic string len
    mov ecx, [esp+4]    ; 
    mov ebx, 1          ; File descriptor (stdout)
    mov eax, 4          ;  call number -> sys_write
    int 0x80            ; system call
    ret                 ; Return from the function
section .data
len equ $ - message     ;length is automatically calculated
Finished processing input.
